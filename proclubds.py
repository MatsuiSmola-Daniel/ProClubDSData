# -*- coding: utf-8 -*-
"""ProClubDS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QI7TQ_CU9SCw5cblqAz9Vy6c2xAfSHrK

<a id='top'></a>
# HHS Pro Club: Data Science 1 (Beginner friendly)
## Contents
* [Python recap](#python)
* [Pandas](#pandas)
* [Matplotlib](#matplotlib)
* [Linear Regression (sklearn)](#reg)

<a id='python'></a>
## Python
Any line with `#` is a comment
### Basic arithmetic
"""

# Some data types
# integer
x = 7
# float (decimals. kinda like doubles in Java)
y = 9.8
# string (single quotes work too)
z = "howdy hey"
a = 'howdy hey'
b = """howdy
hey"""

# add
x + y
# subtract
x - y
# multiply
x * y
# division (returns 3.5)
x / 2
# floor division (returns 3)
x // 2
# mod (returns ~1.8)
y % 2
# exponent (returns 49)
x ** 2

# print (yes you can add and multiply strings)
print("hello world")
print("howdy", "mate")
print((z + " ") * 2)

"""### Lists (kinda like ArrayLists in Java)
Holds multiple elements => used to store multiple variables under single variable
* Ordered (order of elements matter)
* Lists are mutable (can change)
* Heterogenous (can contain data of different types, even functions (kinda like methods))
* Could contain duplicate data
"""

# list
x = 7
lst = [1, 3, "troll", -4.5, x, 7, 8, 9, 0, 1, 3, 34]

# list[index]
print("index 2 is:", lst[2])
lst[2] = "babushka"
print("index 2 is now:", lst[2])

# length of list
print("\nlength of lst is:", len(lst))

# slice list[start : end(not inclusive) : step]
print("\nindex 7 and beyond", lst[7:])
print("index 2 to 5", lst[2:6])
print("every 3 elements", lst[::3])
print()

# to add value to end
lst.append("bob")
print(lst)

# to remove value at index
lst.pop(-4)
print(lst)

# to insert value
lst.insert(2, "hi")
print(lst)

# to remove first occurance of element
lst.remove(3)
print(lst)

"""### Dictionaries
Dictionaries are associative arrays.  
Order of elements don't matter (so no duplicate keys).
Instead a *key* is associated with each *value*.  
Kinda like a real dictionary. Words are associated with definition.
"""

people = {
    "Andrew":"Li",
    5 : "five",
    "Andrew":"Tate", # Duplicate Andrew so latter one overrides first Andrew
    "strawberry":"sorbet",
    "seven":7
}

print("length:", len(people)) # Number of elements in dictionary
print("strawberry:", people["strawberry"])
print("5:", people[5])
print("seven:", people["seven"])
print("Andrew:", people["Andrew"])

"""### Loops and conditional statements

"""

if True: # boolean true
    print("true")
else:
    print("false")

a = [1, 2, 3, 4, 5, 6]
if 7 in a:
    print("7 is in a")
elif 6 in a: # else if
    print("6 is in a")
else:
    print("neither 6 or 7 is in a")

# instead of &&, ||, !, python uses and, or, not
# Comparisons same as Java: <, >, >=, <=, ==, !=

dictionary = {"one":1, "two":2, "three":3, "four":4, "five":5}
if len(dictionary) > 5 or "one" in dictionary:
    print("hi")

dictionary = {"one":1, "two":2, "three":3, "four":4, "five":5}

# for loops
for i in dictionary:
    print(i)

# Iterators
# range(start, end (not inclusive), step)

for i in range(21, 0, -3):
    print(i)

a = [1, 2, 3, 4, 5, 6]

# While loops
while len(a) > 0:
    print(a.pop())
print(a)

"""### Functions
Functions are objects in python.
Kinda like methods in Java.
"""

def multiply_something(a, column=5, row=7):
    if a > 0:
        return a * column * row
    else:
        return "string"

print(multiply_something(3, row=2))

"""There's also other cool things you could do like 
* Explode/Gather positional and keyword arguments with `*` and `**`
* Change mutable arguments (parameters) from inside functions (not recommended)
* Inner functions (define function within another function)
* Anonymous functions (lambda)
* Generator functions and generator comprehensions
* Decorators
* Async Functions

<a id='pandas'></a>
[Back to top (with links to other sections)](#top)
## Pandas
"""

# imports Python modules
import pandas as pd

"""### Load csv data from `twitchdata.csv` onto pandas dataframe.  
<details> 
  <summary>Already done for you. This is how one may go about it if file is saved locally. </summary>

```python
twitch = pd.read_csv("twitchdata.csv")
```
</details>
"""

twitch = pd.read_csv("https://raw.githubusercontent.com/MatsuiSmola-Daniel/ProClubDSData/main/twitchdata.csv")

"""### Run to display dataframe."""

display(twitch)

"""### Print the number of rows and columns in the numpy array. (hint use `twitch.shape`)
<details> 
  <summary>Click to reveal answer. </summary>

```python
row, col = twitch.shape
print(row)
print(col)
```
</details>
"""

row, col =
print(row)
print(col)

"""### Print list of columns
<details> 
  <summary>Click to reveal answer. </summary>

```python
print(twitch.columns)
```
</details>
"""

print()

"""### Print the `Watch time(Minutes)` column
<details> 
  <summary>Click to reveal answer. </summary>

```python
print(twitch["Watch time(Minutes)"])
```
or  
```python
print(twitch[twitch.columns[1]])
```
</details>
"""

print()

"""### Find the average stream time for all the twitch streamers  
hint: You don't have to use a loop
<details> 
  <summary>Click to reveal answer. </summary>

```python
print(twitch[twitch.columns[2]].mean())
```
</details>
"""

print()

"""### Add a column that contains (watch time / stream time) data  
`twitch.head()` will output first 5 rows so you can check your work.  
hint: No need to use loops
<details> 
  <summary>Click to reveal answer. </summary>

```python
twitch["Watch / Stream"] = twitch[twitch.columns[1]] / twitch[twitch.columns[2]]
twitch.head()
```
</details>
"""

twitch["Watch / Stream"] = 
twitch.head()

"""### Display a dataframe containing twitch viewers with less than 5000 average viewers
hint: No need to loop
<details> 
  <summary>Click to reveal answer. </summary>

```python
display(twitch[twitch["Average viewers"] < 5000])
```
</details>
"""

display()

"""<a id='matplotlib'></a>
[Back to top (with links to other sections)](#top)
## Matplotlib
Just a sample. 
Visit https://matplotlib.org/ for more.
"""

# imports matplotlib
import matplotlib.pyplot as plt

plt.scatter(twitch["Average viewers"], twitch["Peak viewers"], alpha = 0.2) # alpha sets opacity
plt.xlabel("Average viewers")
plt.ylabel("Peak viewers")
plt.title("Peak vs Average viewers")
plt.show()

"""<a id='reg'></a>
[Back to top (with links to other sections)](#top)
## Linear Regression Project
### Task: Use Linear Regression to analyze the death rate of cancer patients in various US counties. 
"""

# import LinearRegression from sklearn
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np

"""### Read data from `cancer.csv` onto pandas dataframe
hint: add parameter `encoding ='latin1'` to `read_csv`
<details> 
  <summary>Click to reveal answer. </summary>

```python
url = "https://raw.githubusercontent.com/MatsuiSmola-Daniel/ProClubDSData/main/cancer.csv"
cancer = pd.read_csv(url, encoding ='latin1')
```
</details>
"""

url = "https://raw.githubusercontent.com/MatsuiSmola-Daniel/ProClubDSData/main/cancer.csv"
cancer = pd.read_csv(url, encoding ='latin1')

"""### Display the dataframe"""

display(cancer)

"""### Here's some information about the data
<details> 
  <summary>Click to expand. </summary>

**TARGET_deathRate:** Dependent variable. Mean per capita (100,000) cancer mortalities(a)

**avgAnnCount:** Mean number of reported cases of cancer diagnosed annually(a)

**avgDeathsPerYear:** Mean number of reported mortalities due to cancer(a)

**incidenceRate:** Mean per capita (100,000) cancer diagoses(a)

**medianIncome:** Median income per county (b)

**popEst2015:** Population of county (b)

**povertyPercent:** Percent of populace in poverty (b)

**studyPerCap:** Per capita number of cancer-related clinical trials per county (a)

**binnedInc:** Median income per capita binned by decile (b)

**MedianAge:** Median age of county residents (b)

**MedianAgeMale:** Median age of male county residents (b)

**MedianAgeFemale:** Median age of female county residents (b)

**Geography:** County name (b)

**AvgHouseholdSize:** Mean household size of county (b)

**PercentMarried:** Percent of county residents who are married (b)

**PctNoHS18_24:** Percent of county residents ages 18-24 highest education attained: less than high school (b)

**PctHS18_24:** Percent of county residents ages 18-24 highest education attained: high school diploma (b)

**PctSomeCol18_24:** Percent of county residents ages 18-24 highest education attained: some college (b)

**PctBachDeg18_24:** Percent of county residents ages 18-24 highest education attained: bachelor's degree (b)

**PctHS25_Over:** Percent of county residents ages 25 and over highest education attained: high school diploma (b)

**PctBachDeg25_Over:** Percent of county residents ages 25 and over highest education attained: bachelor's degree (b)

**PctEmployed16_Over:** Percent of county residents ages 16 and over employed (b)

**PctUnemployed16_Over:** Percent of county residents ages 16 and over unemployed (b)

**PctPrivateCoverage:** Percent of county residents with private health coverage (b)

**PctPrivateCoverageAlone:** Percent of county residents with private health coverage alone (no public assistance) (b)

**PctEmpPrivCoverage:** Percent of county residents with employee-provided private health coverage (b)

**PctPublicCoverage:** Percent of county residents with government-provided health coverage (b)

**PctPubliceCoverageAlone:** Percent of county residents with government-provided health coverage alone (b)

**PctWhite:** Percent of county residents who identify as White (b)

**PctBlack:** Percent of county residents who identify as Black (b)

**PctAsian:** Percent of county residents who identify as Asian (b)

**PctOtherRace:** Percent of county residents who identify in a category which is not White, Black, or Asian (b)

**PctMarriedHouseholds:** Percent of married households (b)

**BirthRate:** Number of live births relative to number of women in county (b)

(a): years 2010-2016

(b): 2013 Census Estimates
</details>

### Print number of NaN values by column
`NaN` values are numeric values that are "not a number".  
Usually refers to missing data.
hint: Use `isna()` and `sum()`
<details> 
  <summary>Click to reveal answer. </summary>

```python
print(cancer.isna().sum())
```
</details>
"""

print()

"""### Remove columns with NaN values
`NaN` values or missing data is not helpful for running models on.  
In this case, since it's just a few columns that have a lot of `NaN`s, it's better to just remove those. 
hint: set `axis = 1` to refer to columns when using `dropna()`. 
<details> 
  <summary>Click to reveal answer. </summary>

```python
cancer.dropna(axis=1, inplace=True)
```
or
```python
cancer = cancer.dropna(axis=1)
```
</details>
"""



"""#### Run code below to display all rows that still contain `NaN`s"""

display(cancer[cancer.isna().any(axis=1)])

"""### Print the data types for all columns
<details> 
  <summary>Click to reveal answer. </summary>

```python
cancer.dtypes
```
</details>
"""



"""### Convert all data types to numeric data or remove them
We can see that all columns other than `binnedInc` and `Geography` are numbers (floats or ints).  
While `binnedInc` does contain numbers, it's very similar to `medIncome` (both have to do with median income) so it's probably easier to remove this column.  
`Geography` is the name of the county the data refers to. The name itself isn't very important so drop this column too.
<details> 
  <summary>Click to reveal answer. </summary>

```python
cancer.drop(columns = ["binnedInc", "Geography"], inplace = True)
```
or
```python
cancer = cancer.drop(columns = ["binnedInc", "Geography"])
```
</details>
"""



display(cancer)

"""### Split the dataframe into X and y variables
We're trying to predict `TARGET_deathRate` so that should go into y.  
The rest of the data should go to X.  
However, don't include `avgAnnCount` or `avgDeathsPerYear` as that could "leak" answers to the regression model.  
Make sure they are a deepcopy of the initial dataframe. (A shallow copy would result in any changes to `X` and `y`, changing the original `cancer` dataframe.)
<details> 
  <summary>Click to reveal answer. </summary>

```python
y = cancer["TARGET_deathRate"].copy()
X = cancer[cancer.columns[3:]].copy()
```
</details>
"""

y = 
X =

display(y)
display(X)

"""### Now it's your turn: Remove any covariates (columns) from X that may be redundant or "leak" answers.
Make sure you make your changes with ```inplace = True``` or assign it to some new variable so the change is "saved".
<details> 
  <summary>List of covariates. Click to expand. </summary>

**TARGET_deathRate:** Dependent variable. Mean per capita (100,000) cancer mortalities(a)

**avgAnnCount:** Mean number of reported cases of cancer diagnosed annually(a)

**avgDeathsPerYear:** Mean number of reported mortalities due to cancer(a)

**incidenceRate:** Mean per capita (100,000) cancer diagoses(a)

**medianIncome:** Median income per county (b)

**popEst2015:** Population of county (b)

**povertyPercent:** Percent of populace in poverty (b)

**studyPerCap:** Per capita number of cancer-related clinical trials per county (a)

**binnedInc:** Median income per capita binned by decile (b)

**MedianAge:** Median age of county residents (b)

**MedianAgeMale:** Median age of male county residents (b)

**MedianAgeFemale:** Median age of female county residents (b)

**Geography:** County name (b)

**AvgHouseholdSize:** Mean household size of county (b)

**PercentMarried:** Percent of county residents who are married (b)

**PctNoHS18_24:** Percent of county residents ages 18-24 highest education attained: less than high school (b)

**PctHS18_24:** Percent of county residents ages 18-24 highest education attained: high school diploma (b)

**PctSomeCol18_24:** Percent of county residents ages 18-24 highest education attained: some college (b)

**PctBachDeg18_24:** Percent of county residents ages 18-24 highest education attained: bachelor's degree (b)

**PctHS25_Over:** Percent of county residents ages 25 and over highest education attained: high school diploma (b)

**PctBachDeg25_Over:** Percent of county residents ages 25 and over highest education attained: bachelor's degree (b)

**PctEmployed16_Over:** Percent of county residents ages 16 and over employed (b)

**PctUnemployed16_Over:** Percent of county residents ages 16 and over unemployed (b)

**PctPrivateCoverage:** Percent of county residents with private health coverage (b)

**PctPrivateCoverageAlone:** Percent of county residents with private health coverage alone (no public assistance) (b)

**PctEmpPrivCoverage:** Percent of county residents with employee-provided private health coverage (b)

**PctPublicCoverage:** Percent of county residents with government-provided health coverage (b)

**PctPubliceCoverageAlone:** Percent of county residents with government-provided health coverage alone (b)

**PctWhite:** Percent of county residents who identify as White (b)

**PctBlack:** Percent of county residents who identify as Black (b)

**PctAsian:** Percent of county residents who identify as Asian (b)

**PctOtherRace:** Percent of county residents who identify in a category which is not White, Black, or Asian (b)

**PctMarriedHouseholds:** Percent of married households (b)

**BirthRate:** Number of live births relative to number of women in county (b)

(a): years 2010-2016

(b): 2013 Census Estimates
</details>
"""



"""### Splitting data into test and train dataset.
Split data into training set (75% of data) and test set (25% of data) to test for model performance.  
hint: use `train_test_split()`
<details> 
  <summary>Click to reveal answer. </summary>

```python
X_train, X_test, y_train, y_test = train_test_split(X,y)
print("X_train:",X_train.shape)
print("X_test:",X_test.shape)
print("y_train:",y_train.shape)
print("y_test:",y_test.shape)
```
</details>
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = 
print("X_train:",X_train.shape)
print("X_test:",X_test.shape)
print("y_train:",y_train.shape)
print("y_test:",y_test.shape)

"""### Fit Linear Regression model to training data
<details> 
  <summary>Click to reveal answer. </summary>

```python
regModel = LinearRegression()
regModel.fit(X_train,y_train)
```
</details>
"""

regModel = LinearRegression()
# add code

"""### Predict cancer rates using X test data set.
<details> 
  <summary>Click to reveal answer. </summary>

```python
regPred = regModel.predict(X_test)
```
</details>
"""

regPred =

"""### Evaluate the accuracy of the model. 
<details> 
  <summary>Click to reveal answer. </summary>

```python
regMSE = mean_squared_error(y_test, regPred)
r2 = r2_score(y_test, regPred)
print("Linear Regression:")
print("Mean Squared Error:",regMSE)
print("R^2:", r2)
```
</details>
"""

from sklearn.metrics import mean_squared_error, r2_score

regMSE = 
r2 = 
print("Linear Regression:")
print("Mean Squared Error:",regMSE)
print("R^2:", r2)

"""### Alternate library"""

import statsmodels.api as sm

# Adds bias b
X = sm.add_constant(X)

# Fit linear regression model
model = sm.OLS(y, X).fit()

# view model summary
print(model.summary())